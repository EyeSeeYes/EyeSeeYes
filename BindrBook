//The "BindrBook" class.
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.JToolBar;
import javax.swing.JFrame;
import javax.swing.table.*;
import java.util.*;
import java.io.*;

import java.util.Enumeration;
import javax.swing.AbstractButton;
import javax.swing.ButtonGroup;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Calendar;

/**
 * The class that handles most of the data and manipulation thereof. <p>
 * Creates a JPanel with buttons and text fields inside. <p>
 * The user can interact with the buttons and text fields to create, edit, delete, and move between records.
 * @author Angela Jeong, Janelle Sookhai, Nathan Wolgelerenter, Lucas Lee.
 * @version 4.3, June 8, 2014
 */
public class BindrBook extends JPanel implements ActionListener
{
  /**
   * The array list that stores all the records
   */
  ArrayList <StudentRecord> students = new ArrayList <StudentRecord> (0);
  /**
   * The integer that represents the current record number.
   */
  static int currentRecord = -1;
  /**
   * The action command for the "Previoius" button.
   */
  static final private String PREVIOUS = "previous";
  /**
   * The action command for the "New" button.
   */
  static final private String NEW = "new";
  /**
   * The action command for the "Submit" button.
   */
  static final private String SUBMIT = "submit";
  /**
   * The action command for the "Delete" button.
   */
  static final private String DELETE = "delete";
  /**
   * The action command for the "Next" button.
   */
  static final private String NEXT = "next";
  /**
   * The text field which will receive input for the first name.
   */
  static JTextField inputFirstName;
  /**
   * The text field which will receive input or the last name.
   */
  static JTextField inputLastName;
  /**
   * Button Group for the attendance options. 
   */ 
  static ButtonGroup signInOutGroup;
  /**
   * JRadiobutton for the sign in attendance option.
   */
  JRadioButton signInButton;
  /**
   * JRadiobutton for the sign out attendance option.
   */
  JRadioButton signOutButton;
  /**
   * JRadiobutton for the absent attendance option.
   */
  JRadioButton absentButton;
  /**
   * Text field for time. This is automatically input from the system clock.
   */
  static JTextField inputTime;
  /**
   * The text field which will receive input for the reason number.
   */
  static JTextField inputReason;
  /**
   * The label which will display the current record number and the total record number.
   */
  JLabel currentLabel;
  /**
   * The file that the program currently has opened.
   */
  File currentFile = new File("Untitled");
  /**
  * The current user of the program.
  */
  String currentUser;
  /**
   * The boolean that checks whether the current data has been saved to a file.
   */
  boolean isSaved = true;
  /**
   * If true, it is bindr book. If false, it is the table view layout.
   */ 
  boolean currentLayout = true;
  /**
   * JTable to set up the table in teacher view. 
   */
  JTable table;
  /**
   * Allows the user to edit the content in the table. 
   */
  DefaultTableModel model;
   /**
   * Creates a scroll bar for the table if needed. 
   */
  static JScrollPane scroll;
  /**
   * Displays the data from the record into the table.
   */
  String[][] dataValues;
  /**
   * Reference variable. References the StudentRecord class.
   */
  StudentRecord s;
   /**
   * References the Calendar class.
   */
  Calendar cal;
  /**
   * References the DateFormat class. 
   */
  DateFormat dateFormat;
  

  /**
   * The class constructor - The current user variable is passed in from BindrDatabase.
   * <p>
   * @param user String The current user's username.
   */
  public BindrBook(String user)
  {
     currentUser = user;
  }
  
  /**
   * The makeBook method - makes the binder-view used when adding in new records.
   * @author Janelle Sookhai
   * 
   * @param isTeacher - Boolean to check if the user is a teacher they will be able to view extra things.
   * @param p - JPanel the content is added to. 
   * @param firstName - Label outlining what is expected of the user.
   * @param lastName - Label outlining what is expected of the user.
   * @param time - Label outlining what is expected of the user. 
   * @param reason - Label outlining what is expected of the user.
   * @param signInButton - Radio button for the user to sign in.
   * @param signOutButton - Radio button for the user to sign out.
   * 
   */
  public void makeBook (final boolean isTeacher)
  {
    setLayout (new BorderLayout ());
    
    JPanel p = new JPanel();
    p.setLayout(new BoxLayout (p, BoxLayout.PAGE_AXIS));
    
    //JLabels for the text fields
    JLabel firstName = new JLabel ("First Name:");
    JLabel lastName = new JLabel ("Last Name:");
    JLabel time = new JLabel ("Time:");
    JLabel reason = new JLabel ("Reason:");
    signInButton = new JRadioButton ("Sign In");
    signOutButton = new JRadioButton ("Sign Out");
    
    //text fields
    final JTextField teacherName = new JTextField (15);
    inputFirstName = new JTextField (15);
    inputLastName = new JTextField (15);
    inputTime = new JTextField (10);
    inputReason = new JTextField (15);
    
    if (isTeacher)
    {
      currentLabel = new JLabel ("0 of 0");
      p.add(currentLabel);
    }
    else
    {
      JLabel teacherNameLabel = new JLabel ("Teacher:");
      p.add(teacherNameLabel);
      p.add(teacherName);
    }
    
    p.add (firstName, BorderLayout.LINE_START);
    p.add (inputFirstName);
    
    p.add (lastName, BorderLayout.LINE_START);
    p.add (inputLastName);
    
    p.add (signInButton, BorderLayout.LINE_START);
    p.add (signOutButton);
    
    signInOutGroup = new ButtonGroup();
    signInOutGroup.add (signInButton);
    
    signInOutGroup.add (signOutButton);
    if (isTeacher)
    {
      absentButton = new JRadioButton ("Absent");
      p.add (absentButton);
      signInOutGroup.add (absentButton);
      
      p.add (time, BorderLayout.LINE_START);
      p.add (inputTime);
    }
    
    p.add (reason, BorderLayout.LINE_START);
    p.add (inputReason);
    
    if (!isTeacher)
    {
      JButton submitButton = new JButton ("Submit");
      p.add (submitButton,BorderLayout.LINE_END);
      submitButton.addActionListener(new ActionListener()
                                       {
        public void actionPerformed (ActionEvent e)
        {
          File teacherFile = new File(".//Users/"+teacherName.getText()+"/UserFile.user");
          if (!teacherFile.isFile())
            JOptionPane.showMessageDialog (((Component)e.getSource()).getParent(), "The teacher you entered does not exist.", "ERROR", JOptionPane.ERROR_MESSAGE);
          else
            submitStudentRecord(teacherFile,inputFirstName.getText(),inputLastName.getText(),getSelectedButtonText(signInOutGroup),inputReason.getText());
        }});
    }
    
    setFont(new Font ("Helvetica" , Font.PLAIN , 16));
    
    if (isTeacher)
    {
      JToolBar toolBar = new JToolBar ("Still draggable");
      toolBar.setLayout (new FlowLayout (FlowLayout.CENTER));
      addButtons (toolBar);
      add (toolBar, BorderLayout.PAGE_END);
    }
    p.revalidate();
    add (p, BorderLayout.CENTER);
    
    currentLayout = true;
    displayBook(isTeacher);
  }
  
  
  /**
   * The submitTeacherRecord method - submits a record from teacher view into the file they are currently on.
   * @param none
   */
  private void submitTeacherRecord()
  {
    String first = inputFirstName.getText();
    String last = inputLastName.getText();
    String attendance = getSelectedButtonText(signInOutGroup);
    String time = inputTime.getText();
    
    s = new StudentRecord (first, last, attendance, time, inputReason.getText());
    
    if (currentRecord==-1)
      students.add(s);
    else
      students.set(currentRecord,s);
    
    if (!first.isEmpty())
      s.setFirst(first);
    if (!last.isEmpty())
      s.setLast(last);
    if (!attendance.isEmpty())
      s.setAttendance(attendance);
    if (!time.isEmpty())
      s.setTime(time);
  }
  
  /**
   * The submitStudentRecord method - submits a record from student view into a teacher's user file.
   * @param teacherFile File The teacher's user file.
   * @param first String The student's first name.
   * @param last String The student's last name.
   * @param attendance String Whether the student was signing in or out.
   * @param reason String The student's reason to be signing in or out.
   */
  private void submitStudentRecord(File teacherFile, String first, String last, String attendance, String reason)
  {
    try
    {
      File tempFile = new File ("tempFile.user");
      cal = Calendar.getInstance();
      dateFormat = new SimpleDateFormat("hh:mm a");
      
      BufferedReader br = new BufferedReader(new FileReader(teacherFile));
      PrintWriter pw = new PrintWriter(new FileWriter(tempFile));
      
      pw.println("EYESEEYES BINDR FILE");
      br.readLine();
      try
      {        
        int total = Integer.parseInt(br.readLine());
        pw.println(total+1);
        
        for (int i=0; i<total*5; i++)
        {
          String toPrint = br.readLine();
          System.out.println(toPrint);
          if(toPrint != null)
            pw.println(toPrint);
          else
            pw.println("");
        }
      }
      catch(Exception e)
      {
        JOptionPane.showMessageDialog (this, "File cannot be read, rewriting... ", "Error", JOptionPane.ERROR_MESSAGE);
        pw.println(0);
      }
      
      pw.println(first);
      pw.println(last);
      pw.println(attendance);
      pw.println(dateFormat.format(cal.getTime()).toString());
      pw.println(reason);
      
      pw.close();
      br.close();
      
      teacherFile.delete();
      boolean renamed = tempFile.renameTo(teacherFile);
      
      if(renamed)
        JOptionPane.showMessageDialog (this, "Entry has been successfully submitted.");
      else
        JOptionPane.showMessageDialog (this, "Error has occured while attempting to submit entry.", "ERROR", JOptionPane.ERROR_MESSAGE);
    }
    catch (IOException ioe)
    {
      JOptionPane.showMessageDialog (this, "Unknown error has occured.", "ERROR", JOptionPane.ERROR_MESSAGE);
    }
  }
  
  public String getSelectedButtonText(ButtonGroup signInOutGroup) 
  {
    for (Enumeration<AbstractButton> buttons = signInOutGroup.getElements(); buttons.hasMoreElements();) 
    {
      AbstractButton button = buttons.nextElement();
      
      if (button.isSelected()) 
      {
        return button.getText();
      }
    }
    return null;
  }
  
  /**
   * Gets which button from the button group (signInOutGroup) is selected and changes that into a string
   * so it can go into the table. 
   * 
   * @author Janelle Sookhai
   */
  public String getSelectedButtonText(ButtonGroup signInOutGroup) 
  {
    for (Enumeration<AbstractButton> buttons = signInOutGroup.getElements(); buttons.hasMoreElements();) 
    {
      AbstractButton button = buttons.nextElement();
      
      if (button.isSelected()) 
      {
        return button.getText();
      }
    }
    return null;
  }
  
  /**
   * Adds buttons to the tool bar for teacher view.
   * @author Angela Jeong
   */
  protected void addButtons (JToolBar toolBar)
  {
    JButton button = null;
    
    button = makeButton ("Back", PREVIOUS, "Back to previous record");
    toolBar.add (button);
    
    button = makeButton ("New", NEW, "Create a new record");
    toolBar.add (button);
    
    button = makeButton ("Submit", SUBMIT, "Submits a record");
    toolBar.add (button);
    
    button = makeButton ("Delete", DELETE, "Delete record");
    toolBar.add (button);
    
    button = makeButton ("Forward", NEXT, "Forward to next record");
    toolBar.add (button);
  }
  
  /**
   * Makes the buttons and gets the information needed to get the appropriate image for the tool bar buttons. 
   * @author Angela Jeong
   */
  protected JButton makeButton (String imageName, String actionCommand, String toolTipText)
  {
    Image imageGIF = Toolkit.getDefaultToolkit ().getImage ("Graphics/" + imageName + ".gif");
    JButton button = new JButton ();
    
    button.setToolTipText (toolTipText);
    button.setIcon (new ImageIcon (imageGIF));
    button.setActionCommand (actionCommand);
    button.addActionListener (this);
    
    return button;
  }
  
   /**
   * Makes and displays the content in the form of a table.
   * 
   * @author Janelle Sookhai and Angela Jeong
   * 
   * @param columNames - Stores the colum headings for the table. 
   * @param lightBlue - A custom color used for the background of the table.
   * @param model - TableModel that allows the user to modify data in the table. 
   * @param rNum - Interger used to get the selected row. 
   * @param first - String used if the user needs to modify data in the table.
   * @param last - String used if the user needs to modify data in the table. 
   * @param attendance - String used if the user needs to modify data in the table.
   * @param time - String used if the user needs to modify data in the table.
   * 
   */
  public void makeTable ()
  {
    setLayout (new BorderLayout ());
    
    String[] columnNames = {"First Name" , "Last Name" , "In/Out/Absent" , "Time" , "Reason"};

    
    Color lightBlue = new Color (175, 229, 240); //light blue color for the background of the table
    
    model = new DefaultTableModel (dataValues , columnNames);
    table = new JTable (model);
    
    table.setRowHeight (20);
    table.setShowVerticalLines (true);
    table.setShowHorizontalLines (true);
    
    table.setSelectionForeground (Color.blue);
    table.setSelectionBackground (lightBlue);
    table.setGridColor (Color.red);
    table.setVisible(true);
    
    table.getModel().addTableModelListener(new TableModelListener(){
      @Override
      public void tableChanged(TableModelEvent e) 
      {
        TableModel model = (TableModel)e.getSource();
        int rNum = table.getSelectedRow();
        String first = (String)model.getValueAt(rNum,0);
        String last = (String)model.getValueAt(rNum,1);
        String attendance = (String)model.getValueAt(rNum,2);
        String time = (String)model.getValueAt(rNum,3);
        
        StudentRecord s = new StudentRecord(first,last,attendance,time,(String)model.getValueAt(rNum,4));
        students.set(rNum,s);
        
        if(!first.isEmpty())
          s.setFirst(first);
        if (!last.isEmpty())
          s.setLast(last);
        if (!attendance.isEmpty())
          s.setAttendance(attendance);
        if (!time.isEmpty())
          s.setTime(time);
      }});
    
    scroll = new JScrollPane (table);
    add (scroll, BorderLayout.CENTER);
    
    currentLayout = false;
  }
  
  /**
   * Used to get the data and put it into the table.
   */
  public void createData ()
  {
    dataValues = new String [students.size()] [5];
    
    for (int y = 0; y < students.size(); y++)
    {
      dataValues [y][0] = students.get(y).getFirst();
      dataValues [y][1] = students.get(y).getLast();
      dataValues [y][2] = students.get(y).getAttendance();
      dataValues [y][3] = students.get(y).getTime();
      dataValues [y][4] = students.get(y).getReason();
    }
  }
  
  public void saveTable()
  {
    StudentRecord s;
    students.clear();
    for (int i=0; i<dataValues.length; i++)
    {
      s = new StudentRecord (dataValues[i][0],dataValues[i][1],dataValues[i][2],dataValues[i][3],dataValues[i][4]);
      students.add(s);
      
      // if (!dataValues[i][0].isEmpty())
      s.setFirst(dataValues[i][0]);
      if (!dataValues[i][1].isEmpty())
        s.setLast(dataValues[i][1]);
      if (!dataValues[i][2].isEmpty())
        s.setAttendance(dataValues[i][2]);
      if (!dataValues[i][3].isEmpty())
        s.setTime(dataValues[i][3]);
    }
  }
  
  public void sort(int field)
  {
    int[] array = new int[students.size()];
    array = SortSearch.sort(field, dataValues);
    
    dataValues = new String [array.length][5];
    for (int y=0; y<array.length; y++)
    {
      dataValues [y][0] = students.get(array[y]).getFirst();
      dataValues [y][1] = students.get(array[y]).getLast();
      dataValues [y][2] = students.get(array[y]).getAttendance();
      dataValues [y][3] = students.get(array[y]).getTime();
      dataValues [y][4] = students.get(array[y]).getReason();
    }
  }
  
  public void search(int field, boolean isWhole, String match)
  {
    ArrayList<Integer> array = new ArrayList<>();
    array = SortSearch.search(field, isWhole, match, dataValues);
    
    dataValues = new String [array.size()][5];
    for (int y=0; y<array.size(); y++)
    {
      dataValues [y][0] = students.get(array.get(y)).getFirst();
      dataValues [y][1] = students.get(array.get(y)).getLast();
      dataValues [y][2] = students.get(array.get(y)).getAttendance();
      dataValues [y][3] = students.get(array.get(y)).getTime();
      dataValues [y][4] = students.get(array.get(y)).getReason();
    }
  }
  
  private JFileChooser makeFileChooser(String fileName)
  {
    JFileChooser fc = new JFileChooser (".//"+currentUser);
    
    fc.setFileSelectionMode (JFileChooser.FILES_ONLY);
    fc.setFileFilter(new ExampleFileFilter("bndr", "EYESEEYES BINDR FILE"));
    fc.setSelectedFile(new File(fileName));
    
    return fc;
  }
  
 /**
   * This method erases the contents of the StudentRecord arraylist and shows a blank 
   * template as if the user had just opened the program.
   */
  public void newFile()
  {
    currentFile = new File("Untitled");
    students.clear();
    currentRecord = -1;
  }
  
  /**
   * This method uses JFileChooser to open a file chooser and allow
   * the user to select the file they wish to open (as long as it 
   * fits the filters set).
   * 
   *@param  filter  the instance of ExampleFileFilter to allow for filtering of shown files
   *@param  fileName  the name of the file to be selected and stored
   *@param  fileChooser  the instance of JFileChooser being used in this program
   *@param  result  integer used in the selection of files
   *@param  e  used to check for exceptions while reading the contents of the selected file
   *@param BufferedReader br used with the buffered reader to read from existing files
   */
  public void openFile ()
  {
    JFileChooser fc = makeFileChooser(currentFile.getName().toString());
    
    int result = fc.showOpenDialog (this);
    if (result == JFileChooser.APPROVE_OPTION)
    {
      File file = fc.getSelectedFile();
      String name = file.getName();
      
      if (file == null || name.equals ("") || name.length () > 255)
        JOptionPane.showMessageDialog (this, "Invalid File Name", "Invalid File Name", JOptionPane.ERROR_MESSAGE);
      
      else if (!name.substring(name.length()-4).equalsIgnoreCase("bndr"))
        JOptionPane.showMessageDialog(this, "Invalid File Extension", "Invalid File Extension", JOptionPane.ERROR_MESSAGE);
      
      else if (file.length()==0)
        JOptionPane.showMessageDialog (this, "Empty File", "Empty File", JOptionPane.ERROR_MESSAGE);
      
      else
      {
        try
        {
          BufferedReader br = new BufferedReader (new FileReader (file));
          
          if (!br.readLine().equals("EYESEEYES BINDR FILE"))
            JOptionPane.showMessageDialog(this, "Invalid File Header", "Invalid File Header", JOptionPane.ERROR_MESSAGE);
          
          else
          {
            students.clear();
            int t = Integer.parseInt(br.readLine());
            
            for (int i=0; i<t; i++)
            {
              StudentRecord p = new StudentRecord (br.readLine(),br.readLine(),br.readLine(),br.readLine(),br.readLine());
              students.add(i,p);
            }
            
            currentFile = file;
            currentRecord = 0;
          }
        }
        
        catch (IOException e)
        {
          JOptionPane.showMessageDialog (this, "Error", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        
        catch (NumberFormatException e)
        {
          JOptionPane.showMessageDialog (this, "Error", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
      }
    }
  }
  
  /*This method is used to save files, it writes the information into the file and is called in other methods
   * @param output  PrintWriter used to output into a new file
   */
  public void saveFile(boolean isSaveAs, File fileName)
  {
    if (isSaveAs==false && currentFile.getName().equals("Untitled"))
    {
      int confirm = JOptionPane.showConfirmDialog (this, "This is an Untitled File. Give it a title?", "Untitled File", JOptionPane.OK_CANCEL_OPTION);
      if (confirm == JOptionPane.OK_OPTION)
        saveAs();
    }
    
    else
    {
      try
      {
        PrintWriter pw = new PrintWriter (new FileWriter (fileName));
        
        pw.println("EYESEEYES BINDR FILE");
        pw.println(students.size());
        
        for (int i=0;i<students.size();i++)
        {
          pw.println(students.get(i).getFirst());
          pw.println(students.get(i).getLast());
          pw.println(students.get(i).getAttendance());
          pw.println(students.get(i).getTime());
          pw.println(students.get(i).getReason());
        }
        
        pw.close();
        isSaved = true;
      }
      
      catch (IOException e)
      {
        JOptionPane.showMessageDialog (this, "Error", "ERROR", JOptionPane.ERROR_MESSAGE);
      }
    }
  }
  
  /*This method saves the current file as a new file
   * @param filter  ExampleFilter used to create a fileFilter
   * @param e  ActionEvent used
   * @param result  used to open a fileChooser
   * @param fileChooser  JFileChooser used
   */
  public void saveAs ()
  {
    JFileChooser fc = makeFileChooser("Untitled");
    
    int result = fc.showSaveDialog(this);
    if (result == JFileChooser.APPROVE_OPTION)
    {
      File file = new File(fc.getSelectedFile()+".bndr");
      String name = file.getName();
      
      if (file == null || name.equals ("") || name.length () > 255)
        JOptionPane.showMessageDialog (this, "Invalid File Name", "Invalid File Name", JOptionPane.ERROR_MESSAGE);
      
      else if (!name.substring(name.length()-4).equalsIgnoreCase("bndr"))
        JOptionPane.showMessageDialog(this, "Invalid File Extension", "Invalid File Extension", JOptionPane.ERROR_MESSAGE);
      
      else
        saveFile(true, file);
    }
  }
  
  /**
   * Performs specific tasks for each button the user selects.
   * @param e ActionEvent
   * @param cmd String to get action commands
   */
  public void actionPerformed (ActionEvent e)
  {
    String cmd = e.getActionCommand ();
    
    if (PREVIOUS.equals (cmd))
    {
      if (students.size()!=0)
      {
        if (currentRecord <= 0)
          currentRecord = students.size()-1;
        else
          currentRecord--;
      }
    }
    
    else if (NEXT.equals (cmd))
    {
      if (students.size()!=0)
      {
        if (currentRecord == students.size()-1)
          currentRecord = 0;
        else
          currentRecord++;
      }
    }
    
    else if (NEW.equals (cmd))
    {
      currentRecord = -1;
    }
    
    else if (SUBMIT.equals (cmd))
    {
      submitTeacherRecord();
    }
    else
    {
      if (DELETE.equals (cmd))
      {
        if (students.size()!=0)
        {
          if (currentRecord==-1)
            currentRecord=0;
          else
          {
            students.remove(currentRecord);
            currentRecord--;
            isSaved = false;
          }
        }
      }
    }
    displayBook (true);
  }
  
  /**
   * Updates the text on all the text fields and label after a button was selected by the user.
   * @param isTeacher boolean
   */
  protected void displayBook (boolean isTeacher)
  {
    if (currentRecord == -1)
    {
      inputFirstName.setText("");
      inputLastName.setText("");
      inputReason.setText("");
      signInButton.setSelected(true);
      if (isTeacher)
      {
        cal = Calendar.getInstance();
        dateFormat = new SimpleDateFormat("hh:mm a");
        inputTime.setText(dateFormat.format(cal.getTime()).toString());
      }
    }
    
    else
    {
      inputFirstName.setText(students.get(currentRecord).getFirst());
      inputLastName.setText(students.get(currentRecord).getLast());
      String attendance = students.get(currentRecord).getAttendance();
      if (attendance.equals("Sign In"))
        signInButton.setSelected(true);
      else if (attendance.equals("Sign Out"))
        signOutButton.setSelected(true);
      else if (attendance.equals("Absent"))
        absentButton.setSelected(true);
      else
        signInOutGroup.clearSelection();
      if (isTeacher)
        inputTime.setText(students.get(currentRecord).getTime());
      inputReason.setText(students.get(currentRecord).getReason());
    }
    
    if (isTeacher)
      currentLabel.setText((currentRecord+1) + " of " + students.size());
    updateUI();
  }
}
