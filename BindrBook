//The "User Settings" class.

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;

/**
 * Handles everything to do with user settings, namely changing username/passwords, creating new accounts and deleting old accounts. <p>
 * It is called by the BindrDatabase class when any of the user settings menu items or the "New Account" button in the login panel is selected. <p>
 * @author Angela Jeong, Janelle Sookhai
 * @version 2.0 June 10, 2014
 */
public class UserSettings extends JPanel
{
  /**
   * The BindrDatabase class.
   */
  BindrDatabase b;
  
  /**
   * The class constructor.
   * The BindrDatabase class is pased in and the layout is set to null.
   */
  public UserSettings(BindrDatabase bd)
  {
    b = bd;
    setLayout (null);
  }
  
  /**
   * The change method - creates the panel used in changing usernames and passwords.
   * @param currentUsername String The current user's username.
   * @param currentPassword String The current user's password.
   */
  public void change(final String currentUsername, final String currentPassword)
  {
    JLabel newUsernameLabel = new JLabel ("New username: ");
    JLabel currentPasswordLabel = new JLabel ("Current password: ");
    JLabel newPasswordLabel = new JLabel ("New password: ");
    JLabel confirmNewPasswordLabel = new JLabel ("Confirm new password: ");
    
    final JTextField  inputNewUsername = new JTextField(10);
    final JPasswordField inputCurrentPassword = new JPasswordField(10);
    final JPasswordField  inputNewPassword = new JPasswordField(10);
    final JPasswordField  inputConfirmNewPassword = new JPasswordField(10);
    
    JButton cancelUserSettingsButton = new JButton("Cancel");
    JButton submitUserSettingsButton = new JButton("Submit");
    
    cancelUserSettingsButton.addActionListener (new ActionListener ()
                                                  {
      /**
       * actionPerformed method for the cancelUserSettingsButton.
       * Exits the user setttings panel.
       * @param e ActionEvent
       */
      public void actionPerformed (ActionEvent e)
      {
        b.exitSettings ();
      }});
    
    submitUserSettingsButton.addActionListener (new ActionListener ()
                                                  {
      /**
       * actionPerformed method for the submitUserSettingsButton.
       * Calls the printLogin method if conditions are met, to change user settings.
       * @param e ActionEvent
       */
      public void actionPerformed (ActionEvent e)
      {
        outerIf:
          if (!inputCurrentPassword.getText().equals(currentPassword))
          JOptionPane.showMessageDialog (b, "Incorrect Password", "ERROR", JOptionPane.ERROR_MESSAGE);
          else
          {
            if(!inputNewPassword.getText().isEmpty() && !inputConfirmNewPassword.getText().isEmpty())
            {
              if (inputNewPassword.getText().length()<6 || inputNewPassword.getText().length()>12)
              {
                JOptionPane.showMessageDialog (b, "Password must be between 6 and 12 characters in length.", "ERROR", JOptionPane.ERROR_MESSAGE);
                break outerIf;
              }
              else if (!inputNewPassword.getText().equals(inputConfirmNewPassword.getText()))
              {
                JOptionPane.showMessageDialog (b, "Passwords do not match.", "ERROR", JOptionPane.ERROR_MESSAGE);
                break outerIf;
              }
            }
            printLogin(0, currentUsername, inputNewUsername.getText(), currentPassword, inputNewPassword.getText());
            JOptionPane.showMessageDialog (b, "Successfully changed account settings.");
            b.exitSettings ();
          }
      }});
    
    newUsernameLabel.setBounds (81, 36, 200, 50);
    add(newUsernameLabel);
    inputNewUsername.setBounds (185, 48, 200, 25);
    add(inputNewUsername);
    currentPasswordLabel.setBounds (64, 68, 200, 50);
    add(currentPasswordLabel);
    inputCurrentPassword.setBounds (185, 79, 200, 25);
    add(inputCurrentPassword);
    newPasswordLabel.setBounds (82, 99, 200,  50);
    add (newPasswordLabel);
    inputNewPassword.setBounds (185, 110, 200, 25);
    add (inputNewPassword);
    confirmNewPasswordLabel.setBounds (34, 130, 200, 50);
    add (confirmNewPasswordLabel);
    inputConfirmNewPassword.setBounds (185, 141, 200, 25);
    add (inputConfirmNewPassword);
    cancelUserSettingsButton.setBounds (15, 252, 80, 27);
    add (cancelUserSettingsButton);
    submitUserSettingsButton.setBounds (200, 180, 80, 27);
    add (submitUserSettingsButton);
    validate();
  }
  
  /**
   * The delete method - deletes the current account.
   * @param currentUsername String The current user's username.
   * @param currentPassword String The current user's password.
   */
  public void delete(final String currentUsername, final String currentPassword)
  {
    JLabel confirmPasswordLabel = new JLabel ("Please enter your password: ");
    final JPasswordField  confirmPassword = new JPasswordField(12);
    
    JButton cancelDeleteAccountButton = new JButton("Cancel");
    cancelDeleteAccountButton.addActionListener (new ActionListener ()
                                                   {
      /**
       * actionPerformed method for the cancelDeleteAccountButton.
       * Exits the user settings panel.
       */
      public void actionPerformed (ActionEvent e)
      {
        b.exitSettings ();
      }});
    
    JButton deleteAccountButton = new JButton("Delete Account");
    deleteAccountButton.addActionListener (new ActionListener ()
                                             {
      /**
       * actionPerformed method for the deleteAccountButton.
       * Calls the printLogin method if conditions are met to delete the account, and deletes the account's user file.
       * @param e ActionEvent
       */
      public void actionPerformed (ActionEvent e)
      {
        if (!confirmPassword.getText().equals(currentPassword))
          JOptionPane.showMessageDialog (b, "Incorrect Password", "ERROR", JOptionPane.ERROR_MESSAGE);
        else
        {
          int confirm = JOptionPane.showConfirmDialog (b, "If you delete your account, your account file will be deleted. Do you still wish to delete your account?", "Delete Account", JOptionPane.OK_CANCEL_OPTION);
          
          if (confirm==JOptionPane.OK_OPTION)
          {
            File deleteFile = new File(".//Users/"+currentUsername+".user");
            deleteFile.delete();
            printLogin(1,currentUsername,null,currentPassword,null);
            JOptionPane.showMessageDialog (b, "Successfully deleted account.");
            System.exit(0);
          }
        }
      }});
    
    add(confirmPasswordLabel);
    add(confirmPassword);
    add(cancelDeleteAccountButton);
    add(deleteAccountButton);
    validate();
  }
  
  /**
   * The printLogin method - prints the list of accounts onto the login file.
   * The method also does any manipulations of accounts within the file, namely changing username/passwords, and adding or deleting accounts.
   * @param method int The integer that determines whether the method will change username/passwords, add a new account, or delete an old account.
   * @param currentUsername String The current account's username.
   * @param newUsername String The new username (null if method is not 0).
   * @param currentPassword String The current account's password.
   * @param newPassword String The new password (null if method is not 0).
   */
  public void printLogin(int method, String currentUsername, String newUsername, String currentPassword, String newPassword)
  {
    try
    {
      File inputFile = new File (".//TeacherLogin/teacherInfo.login");
      File tempFile = new File ("tempFile.login");
      
      BufferedReader br = new BufferedReader(new FileReader(inputFile));
      PrintWriter pw = new PrintWriter(new FileWriter(tempFile));
      
      if (!br.readLine().equals ("EYESEEYES BINDR FILE"))
        JOptionPane.showMessageDialog (this, "File cannot be read", "Error", JOptionPane.ERROR_MESSAGE);
      else
      {
        pw.println("EYESEEYES BINDR FILE");
        
        int total = Integer.parseInt(br.readLine());
        if (method==1)
          total++;
        else
        {
          if (method==2)
            total--;
        }
        pw.println(total);
        
        for (int i=0; i<total; i++)
        {
          String currentLine = br.readLine();
          if (method==0 && currentLine.equals(currentUsername))
          {
            if (newUsername.isEmpty()||newUsername.equals(null))
              pw.println(currentUsername);
            else
              pw.println(newUsername);
            if (newPassword.isEmpty()||newUsername.equals(null))
              pw.println(currentPassword);
            else
              pw.println(newPassword);
          }
          else
          {
            pw.println(currentLine);
            pw.println(br.readLine());
          }
        }
        
        br.close();
        pw.close();
        
        inputFile.delete();
        tempFile.renameTo(inputFile);
      }
    }
    catch (IOException ioe)
    {
      System.out.println(ioe);
      JOptionPane.showMessageDialog (b, "Error", "ERROR", JOptionPane.ERROR_MESSAGE);
    }
  }
}
