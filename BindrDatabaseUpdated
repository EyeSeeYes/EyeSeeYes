//The "DatabaseApp" class.
import java.awt.*;
import java.awt.event.*;
import java.awt.image.*;
import javax.imageio.*;
import javax.swing.*;
import java.io.*;

/**
 * The class that runs the program. <p>
 * Creates a new instance of BindrBook and adds it to a window. <p>
 * @author Angela Jeong, Janelle Sookhai, Nathan Wolgelerenter, Lucas Lee.
 * @version 5.0, June 5, 2014
 */
public class BindrDatabase extends JFrame implements ActionListener
{
  /**
   * An instance of the BindrBook class to be added to this class.
   */
  BindrBook b;
  ButtonGroup group, fieldGroup, settingsGroup;
  boolean isTeacher, isWhole, isSorted, isSelected;
  CardLayout cards = new CardLayout ();
  JPanel cardLayoutPanel = new JPanel (cards);
  BufferedImage img;
  JTextField usernameField = new JTextField ();
  JPasswordField passwordField = new JPasswordField ();
  /**
   * The class constructor - Creates a new instance of BindrBook and adds it to a window.
   * Coded by Angela
   * @param none
   */
  public BindrDatabase()
  {
    super ("Bindr");
    setSize (500, 350);
    setResizable(false);
    setLocationRelativeTo(null);
    setDefaultCloseOperation (JFrame.DISPOSE_ON_CLOSE);
    setVisible(true);
    
    try
    {
      splashScreen();
    }
    catch (Exception e)
    {
    }
    accessLevels();
    add(cardLayoutPanel);
    
    SwingUtilities.updateComponentTreeUI(this);
  }
  
  /**
   * Makes the splash screen with the pretty logo on it. (Whoever made that logo is a great artist)
   * Coded by Nathan
   * @param none
   */
  private void splashScreen ()
  {
    JPanel splashScreenPanel = new JPanel();
    try 
    {
      img=ImageIO.read(new File("Graphics/LogoCorrectSize.jpg"));
    }
    catch (IOException e)
    {
    }
    ImageIcon icon=new ImageIcon(img);
    splashScreenPanel.setLayout(new FlowLayout());
    
    JLabel imageLabel=new JLabel();
    imageLabel.setIcon(icon);
    splashScreenPanel.add(imageLabel);
    add (splashScreenPanel);
    SwingUtilities.updateComponentTreeUI(this);
    
    try
    {
      Thread.sleep(1500);
      remove (splashScreenPanel);
    }
    catch (InterruptedException ie)
    {
    }
  }
  
  /**
   * Makes the settings screen where the user can change their username and/or password.
   * 
   * @author Janelle Sookhai
   * 
   * @param newUsernameLabel - JLabel for the new username field.<br>
   * @param currentPasswordLabel - JLabel for the current password password field.<br>
   * @param newPasswordLabel - JLabel for the new password password field.<br>
   * @param confirmNewPasswordLabel - JLabel for the second password password field. Intened to confirm the new password.<br>
   * @param inputNewUsername - JTextField for the user to input their desired new username.<br>
   * @param inputCurrentPassword - JPasswordField for the user to input their current password. Intened for users to only
   * be able to change their own passwords.<br>
   * @param inputNewPassword - JPasswordField for the user to input their desired new password.<br>
   * @param inputConfirmNewPassword - JPasswordField for the user to input their desired new password a second time. Intended
   * to confirm the user's new password.<br>
   * 
   */ 
  public void userSettings ()
  {
    System.out.println ("userSettings beginning");
    remove(b);
    validate();
    final JPanel userSettingsPanel = new JPanel (null);
    
    
    JLabel newUsernameLabel = new JLabel ("New username: ");
    JLabel currentPasswordLabel = new JLabel ("Current password: ");
    JLabel newPasswordLabel = new JLabel ("New password: ");
    JLabel confirmNewPasswordLabel = new JLabel ("Confirm new password: ");
    
    JTextField  inputNewUsername = new JTextField(10);
    JPasswordField inputCurrentPassword = new JPasswordField(10);
    JPasswordField  inputNewPassword = new JPasswordField(10);
    JPasswordField  inputConfirmNewPassword = new JPasswordField(10);
    
    JButton cancelUserSettingsButton = new JButton("Cancel");
    JButton submitUserSettingsButton = new JButton("Submit");
    
    cancelUserSettingsButton.addActionListener (new ActionListener ()
                                                  {
      public void actionPerformed (ActionEvent e)
      {
        System.out.println("cancel user settings test");
        remove(userSettingsPanel);
        makeDatabaseApp ();
        validate();
      }});
    
    submitUserSettingsButton.addActionListener (new ActionListener ()
                                                  {
      public void actionPerformed (ActionEvent e)
      {
        System.out.println("submit user settings test");
      }});
    
    userSettingsPanel.setLayout (new FlowLayout ());
    userSettingsPanel.add(newUsernameLabel);
    userSettingsPanel.add(inputNewUsername);
    userSettingsPanel.add(currentPasswordLabel);
    userSettingsPanel.add(inputCurrentPassword);
    userSettingsPanel.add (newPasswordLabel);
    userSettingsPanel.add (inputNewPassword);
    userSettingsPanel.add (confirmNewPasswordLabel);
    userSettingsPanel.add (inputConfirmNewPassword);
    userSettingsPanel.add (cancelUserSettingsButton);
    userSettingsPanel.add (submitUserSettingsButton);
    
    add(userSettingsPanel);
    
    userSettingsPanel.validate();
    validate();
    System.out.println ("userSettings end");
  }
  
  /**
   * makes the access levels screen thing with student and teacher on it
   * Coded by Lucas
   * @param none
   */
  public void accessLevels () 
  {
    JLabel welcome = new JLabel ("Welcome to Bindr!");
    JButton student = new JButton ("Student");
    JButton teacher = new JButton ("Teacher");
    JLabel username = new JLabel ("Username: ");
    JLabel password = new JLabel ("Password: ");
    JButton signIn = new JButton ("Sign In");
    JButton back = new JButton ("Back");
    
    final JPanel openBindrPanel = new JPanel (null);
    final JPanel loginScreensPanel = new JPanel (null);
    
    openBindrPanel.removeAll ();
    openBindrPanel.validate ();
    
    welcome.setFont (new Font ("Arial", Font.PLAIN, 16)); 
    welcome.setBounds (175, 0, 400, 50);
    
    student.setBounds (30, 65, 203, 203);
    student.addActionListener (new ActionListener ()
                                 {
      public void actionPerformed (ActionEvent e)
      {
        remove(cardLayoutPanel);
        b = new BindrBook();
        b.makeBook(false);
        add(b);
        validate();
      }});
    
    teacher.setBounds (265, 65, 203, 203);
    teacher.addActionListener (new ActionListener ()
                                 {
      public void actionPerformed (ActionEvent e)
      {
        cardLayoutPanel.add (loginScreensPanel, "LP");
        cards.show (cardLayoutPanel, "LP");
      }});
    
    openBindrPanel.add (welcome);
    openBindrPanel.add (student);
    openBindrPanel.add (teacher);
    
    loginScreensPanel.removeAll ();
    loginScreensPanel.validate ();
    
    username.setFont (new Font ("Arial", Font.PLAIN, 16)); 
    username.setBounds (30, 90, 100, 50);
    usernameField.setBounds (135, 103, 200, 25);
    
    password.setFont (new Font ("Arial", Font.PLAIN, 16));
    password.setBounds (30, 165, 100, 50);
    passwordField.setBounds (135, 178, 200, 25);
    
    signIn.setBounds (250, 250, 200, 50);
    signIn.addActionListener (new ActionListener ()
                                {
      public void actionPerformed (ActionEvent e)
      {
        if (canSignIn(usernameField.getText(),passwordField.getText()))
        {
          remove(cardLayoutPanel);
          makeDatabaseApp ();
          validate();
        }
        //else
        {
          //give error message 
        }
      }});
    
    back.setBounds (15, 265, 100, 35);
    back.addActionListener (new ActionListener ( )
                              {
      public void actionPerformed (ActionEvent e)
      {
        cards.show (cardLayoutPanel, "OP");
      }});
    
    loginScreensPanel.add (username);
    loginScreensPanel.add (usernameField);
    loginScreensPanel.add (password);
    loginScreensPanel.add (passwordField);
    loginScreensPanel.add (signIn);
    loginScreensPanel. add (back);
    cardLayoutPanel.add (openBindrPanel, "OP");
  }
  
  protected boolean canSignIn (String userName, String passWord)
  {
    String nameChecker = "";
    String passChecker = "";
    String headerChecker = "";
    try
    {
      BufferedReader input = new BufferedReader (new FileReader (".//TeacherLogin/teacher info.login"));
      headerChecker = input.readLine ();
    }
    catch (Exception e)
    {
      JOptionPane.showMessageDialog (this, "File not found", "Error", JOptionPane.ERROR_MESSAGE);
      return false;
    }
    if (!headerChecker.equals ("EYESEEYES BINDR FILE"))
    {
      JOptionPane.showMessageDialog (this, "File cannot be read", "Error", JOptionPane.ERROR_MESSAGE);
      headerChecker = "";
      return false;
    }
    else 
    {
      try
      {
        BufferedReader input = new BufferedReader (new FileReader (".//TeacherLogin/teacher info.login"));
        input.readLine ();
        nameChecker = input.readLine ();
        passChecker = input.readLine ();
      }
      catch (Exception e)
      {
        JOptionPane.showMessageDialog (this, "File cannot be read", "Error", JOptionPane.ERROR_MESSAGE);
        return false;
      }
    }
    if (userName.equals (nameChecker) && passWord.equals (passChecker))
    {
      return true; 
    }
    else 
    {
      JOptionPane.showMessageDialog (this, "Incorrect username or password", "?", JOptionPane.ERROR_MESSAGE);
    }
    return false; 
  }
  
  /**
   * makes the database app thing for teacher view. the one with the menus in it
   * Coded by Angela
   * @param none
   */
  private void makeDatabaseApp ()
  {
    b = new BindrBook();
    b.makeBook(true);
    add (b);
    
    JMenuItem newItem = new JMenuItem ("New");
    JMenuItem openItem = new JMenuItem ("Open");
    JMenuItem saveItem = new JMenuItem ("Save");
    JMenuItem saveAsItem = new JMenuItem ("Save As");
    JMenuItem quitItem = new JMenuItem ("Quit");
    JMenuItem bindrBookItem = new JMenuItem ("Bindr Book");
    JMenuItem tableItem = new JMenuItem ("Table");
    JMenuItem sortItem = new JMenuItem ("Sort");
    JMenuItem searchItem = new JMenuItem ("Search");
    JMenuItem userSettingsItem = new JMenuItem ("User Settings");
    
    JMenu fileMenu = new JMenu ("File");
    JMenu displayMenu = new JMenu ("Display");
    JMenu sortSearchMenu = new JMenu ("Sort/Search");
    JMenu settingsMenu  = new JMenu ("Settings");
    
    JMenuBar myMenus = new JMenuBar ();
    
    fileMenu.add (newItem);
    fileMenu.add (openItem);
    fileMenu.add (saveItem);
    fileMenu.add (saveAsItem);
    fileMenu.add (quitItem);
    displayMenu.add (bindrBookItem);
    displayMenu.add (tableItem);
    sortSearchMenu.add (sortItem);
    sortSearchMenu.add(searchItem);
    settingsMenu.add (userSettingsItem);
    myMenus.add (fileMenu);
    myMenus.add (displayMenu);
    myMenus.add (sortSearchMenu);
    myMenus.add (settingsMenu);
    setJMenuBar (myMenus);
    
    newItem.addActionListener (this);
    openItem.addActionListener (this);
    saveItem.addActionListener (this);
    saveAsItem.addActionListener (this);
    quitItem.addActionListener (this);
    bindrBookItem.addActionListener (this);
    tableItem.addActionListener (this);
    sortItem.addActionListener (this);
    searchItem.addActionListener (this);
    userSettingsItem.addActionListener (this);
//      (new ActionListener ()
//                                {
//      public void actionPerformed (ActionEvent e)
//      {
//          remove(b);
//          userSettings();
//          validate();
//        //else
//        {
//          //give error message 
//        }
//      }});
    
    SwingUtilities.updateComponentTreeUI(this);
  }
  
//  private void makeSortDialog (final String type)
//  {
//    JDialog d = new JDialog (this, "Sort");
//    isSelected = false;
//    
//    d.setSize (250,100);
//    d.setResizable (false);
//    d.setLayout (new FlowLayout());
//    
//    JLabel label = new JLabel ("Sort By:");
//    group = new ButtonGroup ();
//    JRadioButton firstButton = new JRadioButton ("First Name");
//    firstButton.addActionListener (new ActionListener()
//                                     {
//      public void actionPerformed (ActionEvent e)
//      {
//        if (isSorted)
//        {
//          isSorted = false;
//          b.createData();
//          group.clearSelection();
//        }
//        else
//        {
//            b.sort(1);
//            isSorted = true;
//        }
//        displayLayout(false,false);
//      }
//    });
//    
//    JRadioButton lastButton = new JRadioButton ("Last Name");
//    lastButton.addActionListener (new ActionListener()
//                                    {
//      public void actionPerformed (ActionEvent e)
//      {
//        if (isSorted)
//        {
//          isSorted = false;
//          b.createData();
//          group.clearSelection();
//        }
//        else
//        {
//            b.sort(2);
//          isSorted = true;
//        }
//        displayLayout(false,false);
//      }
//    });
//    
//    JRadioButton timeButton = new JRadioButton ("Time");
//    timeButton.addActionListener (new ActionListener()
//                                    {
//      public void actionPerformed (ActionEvent e)
//      {
//        if (isSorted)
//        {
//          isSorted = false;
//          b.createData();
//          group.clearSelection();
//        }
//        else
//        {
//            b.sort(3);
//          isSorted = true;
//        }
//        displayLayout(false,false);
//      }
//    });
//    
//    JRadioButton attendanceButton = new JRadioButton ("Attendance");
//    attendanceButton.addActionListener (new ActionListener()
//                                      {
//      public void actionPerformed (ActionEvent e)
//      {
//        if (isSorted)
//        {
//          isSorted = false;
//          b.createData();
//          group.clearSelection();
//        }
//        else
//        {
//            b.sort(4);
//          isSorted = true;
//        }
//        displayLayout(false,false);
//      }
//    });
//    
//    group.add(firstButton);
//    group.add(lastButton);
//    group.add(timeButton);
//    group.add(attendanceButton);
//    
//    d.add(label);
//    d.add(firstButton);
//    d.add(lastButton);
//    d.add(timeButton);
//    d.add(attendanceButton);
//    d.setLocationRelativeTo (this);
//    d.setVisible (true);
//  }
//  
//  
//  private void makeSearchDialog()
//  {
//    JDialog d = new JDialog (this, "Search");
//    isSelected = false;
//    isWhole = true;
//    
//    d.setSize (300,200);
//    d.setResizable (false);
//    d.setLayout (new FlowLayout());
//    
//    JLabel matchLabel = new JLabel ("Search for:");
//    final JTextField text = new JTextField (20);
//    
//    settingsGroup = new ButtonGroup ();
//    JRadioButton partialButton = new JRadioButton ("Partial Match");
//    partialButton.setSelected(true);
//    partialButton.addActionListener (new ActionListener()
//                                       {
//      public void actionPerformed (ActionEvent e)
//      {
//        isWhole=false;
//      }
//    });
//    
//    JRadioButton wholeButton = new JRadioButton ("Match Whole Word");
//    wholeButton.addActionListener (new ActionListener()
//                                     {
//      public void actionPerformed (ActionEvent e)
//      {
//        isWhole=true;
//      }
//    });
//    
//    JLabel fieldLabel = new JLabel ("Search In:");
//    fieldGroup = new ButtonGroup ();
//    JRadioButton firstButton = new JRadioButton ("First Name");
//    firstButton.addActionListener (new ActionListener()
//                                     {
//      public void actionPerformed (ActionEvent e)
//      {
//        if (isSelected)
//        {
//          isSelected = false;
//          isSorted = false;
//          b.createData();
//          fieldGroup.clearSelection();
//        }
//        else
//        {
//          if (!isSorted)
//          {
//            b.search(1,1,isWhole,text.getText());
//            System.out.println(text.getText());
//          }
//          else
//            b.search(2,1,isWhole,text.getText());
//          isSelected = true;
//        }
//        displayLayout(false,false);
//      }
//    });
//    
//    JRadioButton lastButton = new JRadioButton ("Last Name");
//    lastButton.addActionListener (new ActionListener()
//                                    {
//      public void actionPerformed (ActionEvent e)
//      {
//        if (isSelected)
//        {
//          isSelected = false;
//          isSorted = false;
//          b.createData();
//          fieldGroup.clearSelection();
//        }
//        else
//        {
//          if (!isSorted)
//            b.search(1,2,isWhole,text.getText());
//          else
//            b.search(2,2,isWhole,text.getText());
//          isSelected = true;
//        }
//        displayLayout(false,false);
//      }
//    });
//    
//    JRadioButton timeButton = new JRadioButton ("Time");
//    timeButton.addActionListener (new ActionListener()
//                                    {
//      public void actionPerformed (ActionEvent e)
//      {
//        if (isSelected)
//        {
//          isSelected = false;
//          isSorted = false;
//          b.createData();
//          fieldGroup.clearSelection();
//        }
//        else
//        {
//          if (!isSorted)
//            b.search(1,3,isWhole,text.getText());
//          else
//            b.search(2,3,isWhole,text.getText());
//          isSelected = true;
//        }
//        displayLayout(false,false);
//      }
//    });
//    
//    JRadioButton reasonButton = new JRadioButton ("Reason");
//    reasonButton.addActionListener (new ActionListener()
//                                      {
//      public void actionPerformed (ActionEvent e)
//      {
//        if (isSelected)
//        {
//          isSelected = false;
//          isSorted = false;
//          b.createData();
//          fieldGroup.clearSelection();
//        }
//        else
//        {
//          if (!isSorted)
//            b.search(1,4,isWhole,text.getText());
//          else
//            b.search(2,4,isWhole,text.getText());
//          isSelected = true;
//        }
//        displayLayout(false,false);
//      }
//    });
//    
//    settingsGroup.add(partialButton);
//    settingsGroup.add(wholeButton);
//    
//    fieldGroup.add(firstButton);
//    fieldGroup.add(lastButton);
//    fieldGroup.add(timeButton);
//    fieldGroup.add(reasonButton);
//    
//    d.add(matchLabel);
//    d.add(text);
//    d.add(partialButton);
//    d.add(wholeButton);
//    d.add(fieldLabel);
//    d.add(firstButton);
//    d.add(lastButton);
//    d.add(timeButton);
//    d.add(reasonButton);
//    d.setLocationRelativeTo (this);
//    d.setVisible (true);
//  }
//  
//  private void checkIsSaved ()
//  {
//    int confirm;
//    
//    if (b.isSaved == false)
//    {
//      confirm = JOptionPane.showConfirmDialog (b, "The file you are currently on is not saved. Save this file?", "Unsaved File", JOptionPane.YES_NO_CANCEL_OPTION);
//      
//      if (confirm == JOptionPane.YES_OPTION)
//        b.saveFile(false, b.currentFile);
//      else
//      {
//        if (confirm == JOptionPane.NO_OPTION)
//          b.isSaved = true;
//      }
//    }
//  }
  
  
  private void displayLayout (boolean layout, boolean newTable)
  {
    b.removeAll();
    if (layout)
    {
      b.makeBook(true);
      b.displayBook(true);
    }
    else
    {
      if (newTable)
        b.createData();
      b.makeTable();
    }
    b.updateUI();
  }
  
  
  /**
   * The actionPerforme method - performs specific tasks corresponding to the menu item selected by the user.
   * @param e ActionEvent - stores user input from the class constructor.
   */
  public void actionPerformed (ActionEvent e)
  {
    if (e.getActionCommand ().equals ("Quit"))
    {
      System.exit (0);
    }
    
    else if (e.getActionCommand ().equals ("User Settings"))
    {
      System.out.println ("user settings");
      b.removeAll();
      userSettings();
      System.out.println ("test");
    }
    
    else if (e.getActionCommand ().equals ("Table"))
    {
      displayLayout(false, true);
    }
//    
//    if (e.getActionCommand ().equals ("New"))
//    {
//      checkIsSaved();
//      if (b.isSaved)
//      {
//        b.newFile();
//        displayLayout(b.currentLayout,true);
//        setTitle("Untitled");
//        b.updateUI();
//      }
//    }
//    
//    if (e.getActionCommand ().equals ("Open"))
//    {
//      checkIsSaved();
//      if (b.isSaved)
//      {
//        b.openFile();
//        displayLayout(b.currentLayout,true);
//        setTitle(b.currentFile.getName());
//        b.updateUI();
//      }
//    }
//    
//    if (e.getActionCommand ().equals ("Save"))
//    {
//      if (b.students.isEmpty())
//        JOptionPane.showMessageDialog (b, "Empty File", "Empty File", JOptionPane.ERROR_MESSAGE);
//      else
//      {
//        if (!b.currentLayout)
//          b.saveTable();
//        b.saveFile(false, b.currentFile);
//      }
//    }
//    
//    if (e.getActionCommand ().equals ("Save As"))
//    {
//      if (b.students.isEmpty())
//        JOptionPane.showMessageDialog (b, "Empty File", "Empty File", JOptionPane.ERROR_MESSAGE);
//      else
//      {
//        if (!b.currentLayout)
//          b.saveTable();
//        b.saveAs();
//        setTitle(b.currentFile.getName());
//      }
//    }
    else
      if (e.getActionCommand ().equals ("Bindr Book"))
    {
      if (b.students.size()!=0)
        b.currentRecord=0;
      displayLayout(true, true);
    }
    
    
    
//    if (e.getActionCommand ().equals ("Sort"))
//    {
//      if (b.currentLayout)
//        displayLayout(false,true);
//      makeSortDialog("Sort");
//    }
//    
//    if (e.getActionCommand ().equals ("Search"))
//    {
//      if (b.currentLayout)
//        displayLayout(false,true);
//      makeSearchDialog();
//    }
  }
  
  /**
   * The main method - Creates a new instance of this class to run the program.
   * <p>
   * Blocks: <p>
   * Block 1: Creates a new instance of this class.
   * <p>
   * @param args String[]
   */
  public static void main (String[] args)
  {
    new BindrDatabase();
  } // main method
}
