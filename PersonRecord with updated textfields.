import java.util.*;

/**
 * Constructor used to store information from the user. The user can store information in all fields or only some. 
 * The first and last names as well as the phone number are formatted here.<p>
 * 
 * @author Janelle Sookhai
 * @version 2.0 Date: March 28/14
 */

public class PersonRecord
{
  /**
   * @param first - The first name of the user.<br>
   * @param last - The last name of the user.<br>
   * @param phone - The phone number of the user.<br>
   * @param email - The email of the user.<br>
   * @param recordTotal - The total number of records created.<br>
   */
  private String first, last, phone, email;
  private String reason;
  static int recordTotal = 0;
  
  /**
   * The main constructor where the user can fill out all of the fields. When this is done the recordTotal is plus one.
   */
  public PersonRecord (String first, String last, String phone, String email)
  {
    this.first = editName(first);
    this.last = editName(last);
    this.phone = editPhoneNum(phone);
    this.email = email;
    recordTotal++;
  }
  
  /**
   * References the main contructor. This time the user can fill out three fields instead of four.
   */
  public PersonRecord (String first, String phone, String email)
  {
    this(first, null, phone, email); 
  }
  
  /**
   * References the main contructor. This time the user can fill out two fields instead of four.
   */
  public PersonRecord (String phone, String email)
  {
    this (null, null, phone, email);
  }
  
  /**
   * References the main contructor. This time the user can fill out one fields instead of four.
   */
  public PersonRecord (String phone)
  {
    this (null, null, phone, null);
  }
  
  /**
   * References the main contructor. This time the user can leave all fields blank.
   */
  public PersonRecord ()
  {
    this (null, null, null, null);
  }
  
  /**
   * Where the first name of the user can be changed for formatting or if the data was editted.
   */
  public void setFirst (String newFirst)
  {
    first = editName(newFirst);
  }
  
  /**
   * Where the last name of the user can be changed for formatting or if the data was editted.
   */
  public void setLast (String newLast)
  {
    last = editName(newLast);
  }
  
  public void setReason (String newReason)
  {
    reason = newReason;
  }
  
  /**
   * Where the phone numebr of the user can be changed for formatting or if the data was editted.
   */
//  public void setPhone (String newNum)
//  {
//    phone = editPhoneNum(newNum);
//  }
  
  /**
   * Where the email of the user can be changed for formatting or if the data was editted.
   */
//  public void setEmail (String newEmail)
//  {
//    email = newEmail;
//  }
  
  /**
   * Gets the current information stored in last.
   * 
   * @return The current data stored in last.
   */
  public String getLastName ()
  {
    return last;
  }
  
  /**
   * Gets the current information stored in first.
   *    
   * @return The current data stored in first.
   */
  public String getFirstName ()
  {
    return first;
  }
  
  public String getReason ()
  {
    return reason;
  }
  
  /**
   * Gets the current information stored in email.
   * 
   * @return The current data stored in email.
   */
//  public String getEmail ()
//  {
//    return email;
//  }
  
  /**
   * Gets the current information stored in phone.
   *   
   * @return The current data stored in phone.
   */
//  public String getPhoneNum ()
//  {
//    return phone;
//  }
  
  /**
   * Edits the first and last name for formatting. Capitalizes the first letter and keeps the rest as lower case.
   * 
   * @return The formatted name.
   */
  private String editName (String name)
  {
    String changedName = "";
    
    if (name == null)
    {
      changedName = null;
    }
    else
    {
      changedName = name.substring(0,1).toUpperCase() + name.substring(1).toLowerCase();
    }
    return changedName;
  }
  
  /**
   * Edits the phone number for formatting. Adds in brackets and dashes to display the phone number
   * in the format (xxx)-xxx-xxxx.
   * 
   * @param changedPhone - The formatted phone number. 
   * 
   * @return The formatted phone number.
   * 
   */ 
  private String editPhoneNum (String phone)
  {
    String changedPhone = "";
    try
    {
      if (phone == null)
      {
        changedPhone = null;
      }
      
      for (int x = 0; x < phone.length(); x++)
      {
        if (Character.isDigit (phone.charAt(x)))
        {
          changedPhone = changedPhone + phone.charAt(x);
        }
      }
      
      changedPhone = "(" + changedPhone.substring (0,3) + ")-" + changedPhone.substring (3, 6) + "-" + changedPhone.substring (6);
      
    }
    catch (NullPointerException e)
    {
    }
    
    return changedPhone; 
  }
}
