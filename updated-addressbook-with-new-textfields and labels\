import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.JToolBar;
import javax.swing.JFrame;
import javax.swing.table.*;
import java.util.*;
import java.io.*;

/**
 * This class creates a JPanel with text fields used to get the user's first and last name, email, and phone number. 
 * All text fields have a respective JLabel telling the user what is expected to be entered.
 * 
 * @author Janelle Sookhai
 * @version March 28/14 Version 2.0
 */

public class AddressBook2 extends JPanel implements ActionListener
{
  /**
   * @param inputFirstName - used for the user to input their first name.<br>
   * @param inputLastName - used for the user to input their last name.<br>
   * @param inputPhoneNum - used for the user to input their phone number.<br>
   * @param inputEmail - used for the user to input their email.<br>
   * @param recordCountLabel - JLabel used to show the recordCount.<br>
   * @param edit - radio button used for when the user is editing a current record.<br>
   * @param persons - Array list of PersonRecord objects.<br>
   * @param recordCount - Number of current record.<br>
   * @param delete - button that deletes the current record.<br>
   * @param coulmnTitle - The title of the column.<br>
   * @param dataValues - Displays the data from the record into the table.<br>
   * @param scrollingBar - Creates the scrolling bar at the side of the table.<br>
   */
  static ArrayList <PersonRecord> persons = new ArrayList<PersonRecord>();
  static final JTextField inputFirstName = new JTextField (15);
  static final JTextField inputLastName = new JTextField (15);
  static final JTextField inputReason = new JTextField (15);
  //static final JTextField inputPhoneNum = new JTextField (15);
  //static final JTextField inputEmail = new JTextField (15);
  private JLabel recordCountLabel = new JLabel();
  final JRadioButton edit = new JRadioButton ("Edit.");
  static int recordCount = 0;
  private JButton delete = new JButton ("Delete.");
  
  private JLabel firstName = new JLabel ("First Name:");
  private JLabel lastName = new JLabel ("Last Name:");
  private JLabel reason = new JLabel ("Reason:");
  private JRadioButton signInButton = new JRadioButton ("Sign in");
  private JRadioButton signOutButton = new JRadioButton ("Sign out");
  //private JLabel phoneNum = new JLabel ("Phone Number:");
  //private JLabel email = new JLabel ("Email:");
  
  
  static JToolBar toolBar = new JToolBar ("Toolbar for the buttons.");
  
  private String header , firstLn , lastLn , phoneLn , emailLn ="";
  private JFileChooser fileChooser = new JFileChooser (".\\Documents");
  private PersonRecord p;
  private File fileName;
  private JFrame frame;
  
  static JScrollPane scrollBar;
  private DefaultTableModel model; 
  private JTable table;
  private String dataValues[] [];
  
  private boolean currentLayout = true;
  
  /**
   * Creates a submit button, and labels stating what the expecteed input is. Sets the font for the text fields and labels.
   * This is where they are all added to the JPanel.<p>
   * 
   *  First if statement - If the number of records is 0, then the delete button will be disabled to avoid errors.
   * 
   * @param toolBar - Toolbar contains the enter, next and previous buttons.<br>
   * @param previous - Goes to the previous record.<br>
   * @param next - Goes to the next record.<br>
   * @param enter - Creates a record.<br>
   * @param previousImage - Picture for the previous button.<br>
   * @param nextImage - Picture for the next button.<br>
   * @param enterImage - Picture for the enter button.<br>
   * @param deleteImage - Picture for the delete button.<br> 
   * @param firstName - Label outlining what is expected of the user.<br>
   * @param lastName - Label outlining what is expected of the user.<br>
   * @param phoneNum - Label outlining what is expected of the user.<br>
   * @param email - Label outlining what is expected of the user.<br>
   */
  public AddressBook2 ( )
  {      
    showAddressBook();
  }
  
  public void showAddressBook()
  {
    setLayout (new BorderLayout());
    
    JButton previous = new JButton ("Previous.");
    Image previousImage = Toolkit.getDefaultToolkit ().getImage ("Graphics/Back24.gif");
    previous.setIcon (new ImageIcon (previousImage, "Previous"));
    
    JButton enter = new JButton ("Enter.");
    Image enterImage = Toolkit.getDefaultToolkit ().getImage ("Graphics/Enter24.gif");
    enter.setIcon (new ImageIcon (enterImage, "Enter"));
    
    JButton next = new JButton ("Next.");
    Image nextImage = Toolkit.getDefaultToolkit ().getImage ("Graphics/Forward24.gif");
    next.setIcon (new ImageIcon (nextImage, "Next"));
    
    Image deleteImage = Toolkit.getDefaultToolkit().getImage ("Graphics/Delete24.gif");
    delete.setIcon (new ImageIcon (deleteImage, "Delete"));
    
    edit.addActionListener(this);
    
    firstName.setFont (new Font ("Helvetica" , Font.PLAIN , 16));
    lastName.setFont (new Font ("Helvetica" , Font.PLAIN , 16));
    reason.setFont (new Font ("Helvetica" , Font.PLAIN , 16));
    //phoneNum.setFont (new Font ("Helvetica" , Font.PLAIN , 16));
    //email.setFont (new Font ("Helvetica" , Font.PLAIN , 16));
    
    inputFirstName.setFont (new Font ("Helvetica" , Font.PLAIN , 16));
    inputLastName.setFont (new Font ("Helvetica" , Font.PLAIN , 16));
    reason.setFont (new Font ("Helvetica" , Font.PLAIN , 16));
    //inputPhoneNum.setFont (new Font ("Helvetica" , Font.PLAIN , 16));
    //inputEmail.setFont (new Font ("Helvetica" , Font.PLAIN , 16));
    
    add (firstName, BorderLayout.LINE_START);
    add (inputFirstName);
    
    add (lastName, BorderLayout.LINE_START);
    add (inputLastName);
    
    add (signInButton, BorderLayout.LINE_START);
    add (signOutButton);
    
    add (reason, BorderLayout.LINE_START);
    add (inputReason);
    //add (phoneNum, BorderLayout.LINE_START);
    //add (inputPhoneNum);
    
    //add (email, BorderLayout.LINE_START);
    //add (inputEmail);
    
    edit.addActionListener(this);
    setLayout(new GridLayout(0,1));
    
    previous.addActionListener(this);
    toolBar.add(previous);
    
    enter.addActionListener(this);
    toolBar.add(enter);
    
    next.addActionListener(this);
    toolBar.add(next);
    
    delete.addActionListener(this);
    toolBar.add(delete);
    
    //First if statement
    if (persons.size() == 0)
    {
      delete.setEnabled(false);
    }
    
    toolBar.add(edit);
    add (toolBar,BorderLayout.CENTER);
    
    currentLayout = true;
    
  }
  
  public void actionPerformed (ActionEvent ae)
  {
    String cmd = ae.getActionCommand();
    
    if ("Enter.".equals(cmd))
    {
      if (edit.isSelected())
      {
        persons.get(recordCount).setFirst(convertToNullIfEmpty(inputFirstName.getText()));
        persons.get(recordCount).setLast(convertToNullIfEmpty(inputLastName.getText()));
        persons.get(recordCount).setReason (convertToNullIfEmpty(inputReason.getText()));
        //persons.get(recordCount).setPhone(convertToNullIfEmpty(inputPhoneNum.getText()));
        //persons.get(recordCount).setEmail(convertToNullIfEmpty(inputEmail.getText()));
      }
      else 
        if (validInput())
      {
        PersonRecord p = new PersonRecord (convertToNullIfEmpty(inputFirstName.getText()), convertToNullIfEmpty(inputLastName.getText()), convertToNullIfEmpty(inputReason.getText()));
        
        if (persons.isEmpty())
        {
          add(recordCountLabel);
        }
        persons.add(p);
        recordCount = persons.size() - 1;
        refresh();
      }
    }
    else if ("Previous.".equals(cmd))
    {
      try
      {
        recordCount = (recordCount - 1 + persons.size()) % persons.size();
        refresh();
      }
      catch (ArithmeticException e)
      {
      }
    }
    else if ("Next.".equals(cmd))
    {
      try
      {
        recordCount = (recordCount + 1) % persons.size();
        refresh();
      }
      catch (ArithmeticException e)
      {
      }
    }
    else
    {
      if ("Delete.".equals(cmd))
      {
        try
        {
          delete.setEnabled(true);
          persons.remove(recordCount);
          recordCount = recordCount - 1;
          refresh();
        }
        catch (ArrayIndexOutOfBoundsException e)
        {
        }
      }
    }
  }
  
  /**
   * Uses JFileChooser to open a file allowing the user to select which file is to be opened provided that it
   * fits the filters set in place.
   * 
   *@param  filter - Instance of ExampleFileFilter.<br>
   *@param  fileName - Name of the file being selected.<br>
   *@param  fileChooser - Instance of JFileChooser.<br>
   *@param  result - Integer used in the selection of files.<br>
   */ 
  public void openFile ()
  {
    ExampleFileFilter filter = new ExampleFileFilter ( );
    filter.addExtension ( "jane" );
    filter.setDescription ( "Jane Files" ); 
    
    fileChooser.setFileFilter (filter);   
    fileChooser.setFileSelectionMode (JFileChooser.FILES_ONLY);  
    int result = fileChooser.showOpenDialog (this);  
    fileName = fileChooser.getSelectedFile ();  
    if (fileName == null || fileName.getName ().equals ("") || fileName.getName ().length () > 255)
    {
      fileName = null;
    }
    else
    {
      BufferedReader input;
      try
      {
        input = new BufferedReader (new FileReader (fileName));
        header = input.readLine ();        
      }
      catch (Exception e)
      {
        if (fileName != null && !fileName.equals (""))
          JOptionPane.showMessageDialog (this, "Invalid File.", "Invalid File.", JOptionPane.ERROR_MESSAGE);
      }
      if (!header.equals ("cooljane"))
      {
        JOptionPane.showMessageDialog (this, "Invalid File.", "Invalid File.", JOptionPane.ERROR_MESSAGE);
        System.out.println (header);
        header = "";
        openFile();
      }
      else
      {
        persons.removeAll(persons);
        try
        {
          input = new BufferedReader (new FileReader (fileName));
          header = input.readLine ();
          int num = Integer.parseInt(input.readLine()); ///// I CHANGED HERE
          for (int x = 0 ; x< num; x++)
          {
            firstLn = input.readLine ();
            lastLn = input.readLine ();
            phoneLn = input.readLine ();
            emailLn = input.readLine ();
            
            p = new PersonRecord (firstLn, lastLn, phoneLn, emailLn);
            persons.add (p);
          }
        }
        catch (Exception e)
        {
          if (firstLn.equals ("null"))
          {
            firstLn = " ";
          }
          else if (lastLn.equals("null"))
          {
            lastLn = " ";
          }
          else if (phoneLn.equals ( "null"))
          {
            phoneLn = " ";
          }
          else
            if ( emailLn.equals ( "null"))
          {
            emailLn = " ";
          }
        } 
      }
      
    }
    recordCount =1;
    refresh();
  }
  
  public void askSave(ActionEvent ae)
  {
    while (fileName == null)
    {
      try
      {
        JOptionPane.showConfirmDialog(frame,"Would you like to save?","Save?",JOptionPane.YES_NO_OPTION);
        
        if (ae.getActionCommand ().equals ("Yes"))
        {
          saveFile();
          break;
        }
        else
          break;
      }
      catch (Exception e)
      {
      }
    }
  }
  
  /**
   * Saves the current array list that the user has created, adding in the header, cooljane, and extension.
   * 
   * @param  filter - Instance of ExampleFileFilter.<br>
   * @param  fileChooser - Instance of JFileChooser.<br>
   * @param  result - Integer used in the selection of files.<br>
   * @param  output - Instance of PrintWriter.<br>
   */
  public void saveFile()
  {
    PrintWriter output;
    ExampleFileFilter filter = new ExampleFileFilter ( );
    filter.addExtension ( "jane" );
    filter.setDescription ( "Jane Files" );    
    JFileChooser fileChooser = new JFileChooser (".\\Documents");   
    fileChooser.setFileFilter (filter);   
    fileChooser.setFileSelectionMode (JFileChooser.FILES_ONLY);  
    int result = fileChooser.showSaveDialog (this);  
    fileName = fileChooser.getSelectedFile ();  
    if (fileName == null || fileName.getName ().equals ("") || fileName.getName ().length () > 255)
    {
      fileName = null;
    }
    else
    {
      
      try
      {
        output = new PrintWriter (new FileWriter (fileName));
        output.println ("cooljane");
        output.println (PersonRecord.recordTotal);
        for (int x = 0; x < persons.size();x++)
        {
          PersonRecord p = persons.get (x);
          output.println (p.getFirstName());
          output.println (p.getLastName());
          //output.println (p.getPhoneNum());
          //output.println (p.getEmail());
          p = new PersonRecord (firstLn, lastLn, phoneLn, emailLn);
        }
        output.close();
      }
      catch (Exception e)
      {
      }  
    }
    refresh();
  }
  
  /**
   * When the user selects new the text fields are set blank and the screen is refreshed.
   */
  public void newFile()
  {
    persons.clear();
    persons.add (new PersonRecord());
    PersonRecord.recordTotal = 0;
    recordCount = 0;
    
    inputFirstName.setText("");
    inputLastName.setText("");
    inputReason.setText("");
    //inputPhoneNum.setText("");
    //inputEmail.setText("");
    
    refresh();
    repaint();  
  }
  
  /**
   * Checks if the input from the user is valid. Displays errors depending on if the input is valid or not. 
   * 
   * @param first - Stores info in the first name field.<br>
   * @param last - Stores info in the last name field.<br>
   * @param phone - Stores info in the phone field.<br>
   * @param email - Stores info in the emial field.<br>
   */
  
  private boolean validInput()
  {
    String first = inputFirstName.getText();
    String last = inputLastName.getText();
    //String phone = inputPhoneNum.getText();
    //String email = inputEmail.getText();
    
    if ((first.equals(null) || first.equals("")) && (last.equals(null) || last.equals("")) /*&& (phone.equals(null) || phone.equals("")) && (email.equals(null) || email.equals(""))*/)
    {
      errorMsg ("Enter at least one field.");
      return false;
    }
//    if (phone!= null && phone.trim().length() > 0 && (!DataCheck.checkPhoneNum(phone)))
//    {
//      errorMsg ("Phone number invalid.");
//      return false;
//    }
//    if (email != null && email.trim().length() > 0 && (!DataCheck.checkEmail(email)))
//    {
//      errorMsg ("Email invalid.");
//      return false;
//    }
    return true;
  }
  
  /**
   * Sends out error messages where the description can be changed depending on the error. <p>
   * 
   * @param msg - Stores the description of the error.<br>
   */ 
  private void errorMsg (String msg)
  {
    JOptionPane.showMessageDialog(this, msg, "ERROR", JOptionPane.ERROR_MESSAGE); 
  }
  /**
   * Used to converty empty strings to null. <p>
   * 
   * @param x - The strong that is either returned or changed to null.<br> 
   */
  private String convertToNullIfEmpty (String x)
  {
    if(x != null && x.trim().length() == 0)
    {
      return null;
    } 
    else 
    {
      return x;
    }
  }
  
  public void JTableMine ()
  {
    setLayout (new BorderLayout());
    
    String [] columnTitles = {"Contact Number" , "First Name" , "Last Name" , "Phone Number" , "Email"};
    
    Color lightBlue = new Color (175, 229, 240); //light blue color for the text
    Color lightPink = new Color (247, 190, 214); //light pink color for the background
    Color lightPurple = new Color (210, 175, 227); //light purple color for the grid lines
    
    model = new DefaultTableModel (createData() , columnTitles){
      //@Override
      public boolean cellEdit ( int row , int column) {
        return column == 0? false:true;
      }};
    
    table = new JTable (model);
    
    table.setColumnSelectionAllowed (false);
    table.setCellSelectionEnabled (false);
    table.setRowSelectionAllowed (true);
    
    table.setRowHeight (20);  //works
    table.setShowVerticalLines (true); //works
    table.setShowHorizontalLines (true); //works
    
    table.setSelectionForeground (lightBlue);
    table.setSelectionBackground (lightPink);
    table.setGridColor (lightPurple);table.setVisible (true);
    
    table.getModel(). addTableModelListener (new TableModelListener() {
      //@Override
      public void tableChanged (TableModelEvent e)
      {
        TableModel model = (TableModel)e.getSource();
        int rowNum = table.getSelectedRow();
        String first = (String)model.getValueAt(rowNum , 1);
        String last = (String)model.getValueAt(rowNum , 2);
        String phone = (String)model.getValueAt(rowNum , 3);
        
        PersonRecord p = new PersonRecord (first, last, phone, (String)model.getValueAt(rowNum , 4));
        persons.set(rowNum , p);
        
        if (!first.isEmpty())
        {
          p.setFirst(first);
        }
        if (!last.isEmpty())
        {
          p.setLast(last);
        }
//        if (phone.isEmpty())
//        {
//          p.setPhone(phone);
//        }
      }});
    
    scrollBar = new JScrollPane (table);
    add (scrollBar, BorderLayout.CENTER);
    
    currentLayout = false;
  }
  
  private String[][] createData ()
  {
    String [] [] dataValues = new String [persons.size()][5];
    
    for (int y = 0; y < persons.size(); y++)
    {
      dataValues [y][0] = ""+ (y+1);
      dataValues [y][1] = persons.get (y).getFirstName();
      dataValues[y][2] = persons.get (y).getLastName();
      //dataValues[y][3] = persons.get (y).getPhoneNum();
      //dataValues[y][4] = persons.get (y).getEmail();
    }
    return dataValues;
  }
  
  
  /**
   * Loads the record with the index recordCount to the UI by setting the text fields with the current data.<p>
   * 
   * @param p - Object created that was created with the given index.<br>
   */
  
  public void refresh()
  {
    PersonRecord p = persons.get(recordCount);
    recordCountLabel.setText((recordCount + 1) + " of " + persons.size());
    
    if (persons.size() != 0)
    {
      delete.setEnabled(true);
    }
    else 
    {
      delete.setEnabled(false);
    }
    inputFirstName.setText(p.getFirstName());
    inputLastName.setText(p.getLastName());
    //inputPhoneNum.setText(p.getPhoneNum());
    //inputEmail.setText(p.getEmail());
    
    repaint();  
  }
}
